{"ast":null,"code":"import { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from './weatherTypes';\nimport Axios from 'axios';\nimport { API_CALL } from '../../components/WeatherSearchAndShow/keys';\nexport const fetchWeatherRequest = () => {\n  return {\n    type: FETCH_WEATHER_REQUEST\n  };\n};\nexport const fetchWeatherSuccess = weather => {\n  return {\n    type: FETCH_WEATHER_SUCCESS,\n    payload: weather\n  };\n};\nexport const fetchWeatherFailure = error => {\n  return {\n    type: FETCH_WEATHER_FAILURE,\n    payload: error\n  };\n};\nexport const fetchWeather = e => {\n  return async dispatch => {\n    dispatch(fetchWeatherRequest);\n    console.log(\"fetchWeatherRequest\", fetchWeatherRequest); //check fetchWeatherRequest \n\n    try {\n      e.preventDefault();\n      const city = e.target.elements.city.value; //e.target.elements.city.value\n\n      const api_call = await Axios.get(API_CALL(city));\n      const weather = api_call;\n      dispatch(fetchWeatherSuccess(weather));\n      console.log(\"city\", city); //check input \n\n      console.log(\"weather in action\", weather); //check data \n    } catch (error) {\n      dispatch(fetchWeatherFailure(error));\n      alert('City not found!');\n    }\n  };\n};","map":{"version":3,"sources":["/Users/Ivan/Documents/GitHub/Weather-App-React/weather-app/src/redux/weather/weatherActions.js"],"names":["FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","Axios","API_CALL","fetchWeatherRequest","type","fetchWeatherSuccess","weather","payload","fetchWeatherFailure","error","fetchWeather","e","dispatch","console","log","preventDefault","city","target","elements","value","api_call","get","alert"],"mappings":"AAAA,SACEA,qBADF,EAEEC,qBAFF,EAGEC,qBAHF,QAIO,gBAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,QAAR,QAAuB,4CAAvB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,SAAM;AACJC,IAAAA,IAAI,EAAEN;AADF,GAAN;AAGD,CAJM;AAMP,OAAO,MAAMO,mBAAmB,GAAIC,OAAD,IAAa;AAC9C,SAAM;AACJF,IAAAA,IAAI,EAAEL,qBADF;AAEJQ,IAAAA,OAAO,EAAED;AAFL,GAAN;AAID,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAIC,KAAD,IAAW;AAC5C,SAAM;AACJL,IAAAA,IAAI,EAAEJ,qBADF;AAEJO,IAAAA,OAAO,EAAEE;AAFL,GAAN;AAID,CALM;AAOP,OAAO,MAAMC,YAAY,GAAIC,CAAD,IAAO;AACjC,SAAO,MAAMC,QAAN,IAAmB;AACxBA,IAAAA,QAAQ,CAACT,mBAAD,CAAR;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCX,mBAAnC,EAFwB,CAEiC;;AACzD,QAAG;AACDQ,MAAAA,CAAC,CAACI,cAAF;AACA,YAAMC,IAAI,GAAGL,CAAC,CAACM,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAApC,CAFC,CAEyC;;AAC1C,YAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAUnB,QAAQ,CAACc,IAAD,CAAlB,CAAvB;AACA,YAAMV,OAAO,GAAGc,QAAhB;AACAR,MAAAA,QAAQ,CAACP,mBAAmB,CAACC,OAAD,CAApB,CAAR;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBE,IAApB,EANC,CAM0B;;AAC3BH,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCR,OAAjC,EAPC,CAO0C;AAC5C,KARD,CAQC,OAAMG,KAAN,EAAY;AACXG,MAAAA,QAAQ,CAACJ,mBAAmB,CAACC,KAAD,CAApB,CAAR;AACAa,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACD;AACF,GAfD;AAgBD,CAjBM","sourcesContent":["import {\n  FETCH_WEATHER_REQUEST,\n  FETCH_WEATHER_SUCCESS,\n  FETCH_WEATHER_FAILURE\n} from './weatherTypes';\nimport Axios from 'axios';\n\nimport {API_CALL} from '../../components/WeatherSearchAndShow/keys';\n\nexport const fetchWeatherRequest = () => {\n  return{\n    type: FETCH_WEATHER_REQUEST\n  }\n}\n\nexport const fetchWeatherSuccess = (weather) => {\n  return{\n    type: FETCH_WEATHER_SUCCESS,\n    payload: weather\n  }\n}\n\nexport const fetchWeatherFailure = (error) => {\n  return{\n    type: FETCH_WEATHER_FAILURE,\n    payload: error\n  }\n}\n\nexport const fetchWeather = (e) => {\n  return async(dispatch) => {\n    dispatch(fetchWeatherRequest);\n    console.log(\"fetchWeatherRequest\", fetchWeatherRequest); //check fetchWeatherRequest \n    try{\n      e.preventDefault();\n      const city = e.target.elements.city.value;//e.target.elements.city.value\n      const api_call = await Axios.get(API_CALL(city));\n      const weather = api_call;\n      dispatch(fetchWeatherSuccess(weather));\n      console.log(\"city\", city); //check input \n      console.log(\"weather in action\", weather); //check data \n    }catch(error){\n      dispatch(fetchWeatherFailure(error));\n      alert('City not found!')\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}