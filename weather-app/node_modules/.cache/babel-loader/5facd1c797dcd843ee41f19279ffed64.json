{"ast":null,"code":"import _slicedToArray from\"/Users/Ivan/Documents/GitHub/Weather-App-React/weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{fetchWeather}from'../../redux/weather/weatherActions';import{getWeatherSelector}from'../../selectors';import{connect}from'react-redux';import ShowWeather from'./ShowWeather';import SearchWeatherForm from'./SearchWeatherForm';import'./WeatherSearchAndShow.scss';var WeatherSearchAndShow=function WeatherSearchAndShow(_ref){var weatherInfo=_ref.weatherInfo,getWeather=_ref.getWeather;var _useState=useState({city:undefined,country:undefined,temp:undefined,humidity:undefined,description:undefined,error:\"\"}),_useState2=_slicedToArray(_useState,2),weather=_useState2[0],setWeather=_useState2[1];useEffect(function(){if(weatherInfo.weather){setWeather({city:weatherInfo.weather.data.city.name,country:weatherInfo.weather.data.city.country,temp:weatherInfo.weather.data.list[0].main.temp,humidity:weatherInfo.weather.data.list[0].main.humidity,description:weatherInfo.weather.data.list[0].weather[0].description,error:\"\"});}},[weatherInfo.weather]);return/*#__PURE__*/React.createElement(\"div\",{className:\"WeatherSearchAndShow\"},/*#__PURE__*/React.createElement(SearchWeatherForm,{getWeather:getWeather}),/*#__PURE__*/React.createElement(ShowWeather,{checkFetching:weatherInfo.weather,weather:weather}));};var mapStateToProps=function mapStateToProps(state){return{weatherInfo:getWeatherSelector(state)};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{getWeather:function getWeather(e){return dispatch(fetchWeather(e));}};};export default connect(mapStateToProps,mapDispatchToProps)(WeatherSearchAndShow);","map":{"version":3,"sources":["/Users/Ivan/Documents/GitHub/Weather-App-React/weather-app/src/components/WeatherSearchAndShow/WeatherSearchAndShow.js"],"names":["React","useState","useEffect","fetchWeather","getWeatherSelector","connect","ShowWeather","SearchWeatherForm","WeatherSearchAndShow","weatherInfo","getWeather","city","undefined","country","temp","humidity","description","error","weather","setWeather","data","name","list","main","mapStateToProps","state","mapDispatchToProps","dispatch","e"],"mappings":"6IAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAAQC,YAAR,KAA4B,oCAA5B,CACA,OAAQC,kBAAR,KAAiC,iBAAjC,CACA,OAAQC,OAAR,KAAsB,aAAtB,CAEA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,qBAA9B,CAEA,MAAO,6BAAP,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,MAA+B,IAA7BC,CAAAA,WAA6B,MAA7BA,WAA6B,CAAhBC,UAAgB,MAAhBA,UAAgB,eAC5BT,QAAQ,CAAC,CACrCU,IAAI,CAAEC,SAD+B,CAErCC,OAAO,CAAED,SAF4B,CAGrCE,IAAI,CAAEF,SAH+B,CAIrCG,QAAQ,CAAEH,SAJ2B,CAKrCI,WAAW,CAAEJ,SALwB,CAMrCK,KAAK,CAAE,EAN8B,CAAD,CADoB,wCACnDC,OADmD,eAC1CC,UAD0C,eAU1DjB,SAAS,CAAC,UAAM,CACd,GAAGO,WAAW,CAACS,OAAf,CAAuB,CACvBC,UAAU,CAAC,CACTR,IAAI,CAAEF,WAAW,CAACS,OAAZ,CAAoBE,IAApB,CAAyBT,IAAzB,CAA8BU,IAD3B,CAETR,OAAO,CAAEJ,WAAW,CAACS,OAAZ,CAAoBE,IAApB,CAAyBT,IAAzB,CAA8BE,OAF9B,CAGTC,IAAI,CAAEL,WAAW,CAACS,OAAZ,CAAoBE,IAApB,CAAyBE,IAAzB,CAA8B,CAA9B,EAAiCC,IAAjC,CAAsCT,IAHnC,CAITC,QAAQ,CAAEN,WAAW,CAACS,OAAZ,CAAoBE,IAApB,CAAyBE,IAAzB,CAA8B,CAA9B,EAAiCC,IAAjC,CAAsCR,QAJvC,CAKTC,WAAW,CAAEP,WAAW,CAACS,OAAZ,CAAoBE,IAApB,CAAyBE,IAAzB,CAA8B,CAA9B,EAAiCJ,OAAjC,CAAyC,CAAzC,EAA4CF,WALhD,CAMTC,KAAK,CAAE,EANE,CAAD,CAAV,CAQD,CACF,CAXU,CAWR,CAACR,WAAW,CAACS,OAAb,CAXQ,CAAT,CAaA,mBACE,2BAAK,SAAS,CAAC,sBAAf,eACE,oBAAC,iBAAD,EAAmB,UAAU,CAAER,UAA/B,EADF,cAEE,oBAAC,WAAD,EAAa,aAAa,CAAED,WAAW,CAACS,OAAxC,CAAiD,OAAO,CAAEA,OAA1D,EAFF,CADF,CAMD,CA7BD,CA+BA,GAAMM,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAU,CAChC,MAAM,CACJhB,WAAW,CAAEL,kBAAkB,CAACqB,KAAD,CAD3B,CAAN,CAGD,CAJD,CAMA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAc,CACvC,MAAO,CACLjB,UAAU,CAAE,oBAACkB,CAAD,QAAOD,CAAAA,QAAQ,CAACxB,YAAY,CAACyB,CAAD,CAAb,CAAf,EADP,CAAP,CAGD,CAJD,CAMA,cAAevB,CAAAA,OAAO,CACpBmB,eADoB,CAEpBE,kBAFoB,CAAP,CAGblB,oBAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {fetchWeather } from '../../redux/weather/weatherActions';\nimport {getWeatherSelector} from '../../selectors';\nimport {connect} from 'react-redux';\n\nimport ShowWeather from './ShowWeather';\nimport SearchWeatherForm from './SearchWeatherForm';\n\nimport './WeatherSearchAndShow.scss';\n\nconst WeatherSearchAndShow = ({weatherInfo, getWeather}) => {\n  const [weather, setWeather ]= useState({\n    city: undefined,\n    country: undefined,\n    temp: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: \"\"\n  })\n  \n  useEffect(() => {\n    if(weatherInfo.weather){\n    setWeather({\n      city: weatherInfo.weather.data.city.name,\n      country: weatherInfo.weather.data.city.country,\n      temp: weatherInfo.weather.data.list[0].main.temp,\n      humidity: weatherInfo.weather.data.list[0].main.humidity,\n      description: weatherInfo.weather.data.list[0].weather[0].description,\n      error: \"\"\n    });\n  }\n}, [weatherInfo.weather])\n\n  return (\n    <div className=\"WeatherSearchAndShow\">\n      <SearchWeatherForm getWeather={getWeather} />\n      <ShowWeather checkFetching={weatherInfo.weather} weather={weather} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) =>{\n  return{\n    weatherInfo: getWeatherSelector(state)\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return { \n    getWeather: (e) => dispatch(fetchWeather(e))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WeatherSearchAndShow);"]},"metadata":{},"sourceType":"module"}