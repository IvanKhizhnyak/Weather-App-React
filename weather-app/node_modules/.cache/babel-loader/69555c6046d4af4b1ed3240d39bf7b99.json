{"ast":null,"code":"import _regeneratorRuntime from\"/Users/Ivan/Documents/GitHub/Weather-App-React/weather-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/Ivan/Documents/GitHub/Weather-App-React/weather-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{FETCH_WEATHER_REQUEST,FETCH_WEATHER_SUCCESS,FETCH_WEATHER_FAILURE}from'./weatherTypes';import Axios from'axios';import{API_CALL}from'../../components/WeatherSearchAndShow/keys';export var fetchWeatherRequest=function fetchWeatherRequest(){return{type:FETCH_WEATHER_REQUEST};};export var fetchWeatherSuccess=function fetchWeatherSuccess(weather){return{type:FETCH_WEATHER_SUCCESS,payload:weather};};export var fetchWeatherFailure=function fetchWeatherFailure(error){return{type:FETCH_WEATHER_FAILURE,payload:error};};export var fetchWeather=function fetchWeather(e){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var city,api_call,weather;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(fetchWeatherRequest);console.log(\"fetchWeatherRequest\",fetchWeatherRequest);//check fetchWeatherRequest \n_context.prev=2;e.preventDefault();city=e.target.elements.city.value;//e.target.elements.city.value\n_context.next=7;return Axios.get(API_CALL(city));case 7:api_call=_context.sent;weather=api_call;dispatch(fetchWeatherSuccess(weather));console.log(\"city\",city);//check input \nconsole.log(\"weather in action\",weather);//check data \n_context.next=18;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](2);dispatch(fetchWeatherFailure(_context.t0));alert('City not found!');case 18:case\"end\":return _context.stop();}}},_callee,null,[[2,14]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/Ivan/Documents/GitHub/Weather-App-React/weather-app/src/redux/weather/weatherActions.js"],"names":["FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","Axios","API_CALL","fetchWeatherRequest","type","fetchWeatherSuccess","weather","payload","fetchWeatherFailure","error","fetchWeather","e","dispatch","console","log","preventDefault","city","target","elements","value","get","api_call","alert"],"mappings":"uRAAA,OACEA,qBADF,CAEEC,qBAFF,CAGEC,qBAHF,KAIO,gBAJP,CAKA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAAQC,QAAR,KAAuB,4CAAvB,CAEA,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CACvC,MAAM,CACJC,IAAI,CAAEN,qBADF,CAAN,CAGD,CAJM,CAMP,MAAO,IAAMO,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,OAAD,CAAa,CAC9C,MAAM,CACJF,IAAI,CAAEL,qBADF,CAEJQ,OAAO,CAAED,OAFL,CAAN,CAID,CALM,CAOP,MAAO,IAAME,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,KAAD,CAAW,CAC5C,MAAM,CACJL,IAAI,CAAEJ,qBADF,CAEJO,OAAO,CAAEE,KAFL,CAAN,CAID,CALM,CAOP,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CACjC,+FAAO,iBAAMC,QAAN,4IACLA,QAAQ,CAACT,mBAAD,CAAR,CACAU,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAmCX,mBAAnC,EAAyD;AAFpD,gBAIHQ,CAAC,CAACI,cAAF,GACMC,IALH,CAKUL,CAAC,CAACM,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KALjC,CAKuC;AALvC,sBAMoBlB,CAAAA,KAAK,CAACmB,GAAN,CAAUlB,QAAQ,CAACc,IAAD,CAAlB,CANpB,QAMGK,QANH,eAOGf,OAPH,CAOae,QAPb,CAQHT,QAAQ,CAACP,mBAAmB,CAACC,OAAD,CAApB,CAAR,CACAO,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAoBE,IAApB,EAA2B;AAC3BH,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAiCR,OAAjC,EAA2C;AAVxC,iFAYHM,QAAQ,CAACJ,mBAAmB,aAApB,CAAR,CACAc,KAAK,CAAC,iBAAD,CAAL,CAbG,qEAAP,+DAgBD,CAjBM","sourcesContent":["import {\n  FETCH_WEATHER_REQUEST,\n  FETCH_WEATHER_SUCCESS,\n  FETCH_WEATHER_FAILURE\n} from './weatherTypes';\nimport Axios from 'axios';\n\nimport {API_CALL} from '../../components/WeatherSearchAndShow/keys';\n\nexport const fetchWeatherRequest = () => {\n  return{\n    type: FETCH_WEATHER_REQUEST\n  }\n}\n\nexport const fetchWeatherSuccess = (weather) => {\n  return{\n    type: FETCH_WEATHER_SUCCESS,\n    payload: weather\n  }\n}\n\nexport const fetchWeatherFailure = (error) => {\n  return{\n    type: FETCH_WEATHER_FAILURE,\n    payload: error\n  }\n}\n\nexport const fetchWeather = (e) => {\n  return async(dispatch) => {\n    dispatch(fetchWeatherRequest);\n    console.log(\"fetchWeatherRequest\", fetchWeatherRequest); //check fetchWeatherRequest \n    try{\n      e.preventDefault();\n      const city = e.target.elements.city.value;//e.target.elements.city.value\n      const api_call = await Axios.get(API_CALL(city));\n      const weather = api_call;\n      dispatch(fetchWeatherSuccess(weather));\n      console.log(\"city\", city); //check input \n      console.log(\"weather in action\", weather); //check data \n    }catch(error){\n      dispatch(fetchWeatherFailure(error));\n      alert('City not found!')\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}