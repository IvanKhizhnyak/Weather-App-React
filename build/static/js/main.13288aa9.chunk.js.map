{"version":3,"sources":["components/header/Header.js","components/footer/footer.js","redux/weather/weatherActions.js","redux/weather/weatherTypes.js","selectors.js","components/WeatherSearchAndShow/ShowWeather.js","components/WeatherSearchAndShow/SearchWeatherForm.js","components/WeatherSearchAndShow/WeatherSearchAndShow.js","components/WeatherSearchAndShow/keys.js","redux/weather/weatherReducer.js","redux/rootReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","target","href","fetchWeatherRequest","type","fetchWeatherSuccess","weather","payload","getWeatherSelector","createSelector","state","console","log","ShowWeather","checkFetching","city","country","temp","toFixed","humidity","description","error","SearchWeatherForm","getWeather","onSubmit","name","placeholder","connect","weatherInfo","dispatch","e","a","preventDefault","elements","value","Axios","get","api_call","alert","fetchWeather","useState","undefined","setWeather","useEffect","data","list","main","initialState","loading","weatherReducer","action","rootReducer","combineReducers","store","createStore","rootReduser","composeWithDevTools","applyMiddleware","logger","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.13288aa9.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n        <h2>Weather App</h2>\n        <p>Helps you to find the weather</p>\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react'\nimport './footer.scss'\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n        <p>Created by Ivan Khizhnyak</p>\n        <p>Just for portfolio</p>\n        <p><a target=\"_blanc\" href=\"https://github.com/IvanKhizhnyak\">\n          Check my GitHub for more\n        </a></p>\n        \n        \n    </div>\n  )\n}\n\nexport default Footer\n","import {\n  FETCH_WEATHER_REQUEST,\n  FETCH_WEATHER_SUCCESS,\n  FETCH_WEATHER_FAILURE\n} from './weatherTypes';\nimport Axios from 'axios';\n\nimport {API_CALL} from '../../components/WeatherSearchAndShow/keys';\n\nexport const fetchWeatherRequest = () => {\n  return{\n    type: FETCH_WEATHER_REQUEST\n  }\n}\n\nexport const fetchWeatherSuccess = (weather) => {\n  return{\n    type: FETCH_WEATHER_SUCCESS,\n    payload: weather\n  }\n}\n\nexport const fetchWeatherFailure = (error) => {\n  return{\n    type: FETCH_WEATHER_FAILURE,\n    payload: error\n  }\n}\n\nexport const fetchWeather = (e) => {\n  return async(dispatch) => {\n    dispatch(fetchWeatherRequest);\n    console.log(\"fetchWeatherRequest\", fetchWeatherRequest); //check fetchWeatherRequest \n    try{\n      e.preventDefault();\n      const city = e.target.elements.city.value;//e.target.elements.city.value\n      const api_call = await Axios.get(API_CALL(city));\n      const weather = api_call;\n      dispatch(fetchWeatherSuccess(weather));\n      console.log(\"city\", city); //check input \n      console.log(\"weather in action\", weather); //check data \n    }catch(error){\n      dispatch(fetchWeatherFailure(error));\n      alert('City not found!')\n    }\n  }\n}\n","export const FETCH_WEATHER_REQUEST = \"FETCH_WEATHER_REQUEST\";\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\";","import {createSelector} from 'reselect';\n\nconst getWeather = (state) => {\n  console.log('getWeather', state.weather);\n  return state.weather;\n}\n\nexport const getWeatherSelector = createSelector(getWeather, (weather)=>{\n  console.log('getWeatherSelector', weather);\n  return weather;\n})\n\n","import React from 'react';\nimport './ShowWeather.scss';\n\n\nconst ShowWeather = ({checkFetching, weather}) => {\n  \n  console.log('weather show', weather);\n  console.log('checkFetching show', checkFetching);\n\n  const calvinToCelsium = (tempInCal) => {\n    const tempInCel = tempInCal - 273.15;\n    return tempInCel.toFixed(2);\n  }\n\n  return (\n    <div className=\"ShowWeather\">\n       {\n        checkFetching\n        ?<div className=\"result\">\n        {weather.city && weather.country && <div><p >Location: </p><p>{weather.city}, {weather.country}</p></div>}\n        {weather.temp && <div><p >Temperature: </p><p>{calvinToCelsium(weather.temp)} Â°C</p></div>}\n        {weather.humidity && <div><p >Humidity: </p><p>{weather.humidity} %</p></div>}\n        {weather.description && <div><p >Description: </p><p>{weather.description}</p></div>}\n        {weather.error && <div><p >error: </p><p>{weather.error}</p></div>}\n        </div>\n        :<p className=\"init-text\">Please, enter the city above</p>\n      } \n    </div>\n  )\n}\nexport default ShowWeather;\n","import React from 'react';\nimport './SearchWeatherForm.scss';\n\nfunction SearchWeatherForm({getWeather}) {\n  return (\n    <form onSubmit={getWeather} className=\"SearchWeatherForm\">\n        <input\n          type=\"text\"\n          name=\"city\"\n          placeholder=\"City...\"\n        />\n        <button\n          type=\"submit\"\n        >\n        Find\n        </button>\n      </form> \n  )\n}\n\nexport default SearchWeatherForm;\n","import React, { useState, useEffect } from 'react';\nimport {fetchWeather } from '../../redux/weather/weatherActions';\nimport {getWeatherSelector} from '../../selectors';\nimport {connect} from 'react-redux';\n\nimport ShowWeather from './ShowWeather';\nimport SearchWeatherForm from './SearchWeatherForm';\n\nimport './WeatherSearchAndShow.scss';\n\nconst WeatherSearchAndShow = ({weatherInfo, getWeather}) => {\n  const [weather, setWeather ]= useState({\n    city: undefined,\n    country: undefined,\n    temp: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: \"\"\n  })\n  \n  useEffect(() => {\n    if(weatherInfo.weather){\n    setWeather({\n      city: weatherInfo.weather.data.city.name,\n      country: weatherInfo.weather.data.city.country,\n      temp: weatherInfo.weather.data.list[0].main.temp,\n      humidity: weatherInfo.weather.data.list[0].main.humidity,\n      description: weatherInfo.weather.data.list[0].weather[0].description,\n      error: \"\"\n    });\n  }\n}, [weatherInfo.weather])\n\n  return (\n    <div className=\"WeatherSearchAndShow\">\n      <SearchWeatherForm getWeather={getWeather} />\n      <ShowWeather checkFetching={weatherInfo.weather} weather={weather} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) =>{\n  return{\n    weatherInfo: getWeatherSelector(state)\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return { \n    getWeather: (e) => dispatch(fetchWeather(e))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WeatherSearchAndShow);","const API_KEY = '115f06c9cb74251853d88e3df0fd0b36'; \nexport const API_CALL = (CITY_ID) => {\n  return `http://api.openweathermap.org/data/2.5/forecast?q=${CITY_ID}&APPID=${API_KEY}`\n}\n\n","import {\n  FETCH_WEATHER_REQUEST,\n  FETCH_WEATHER_SUCCESS,\n  FETCH_WEATHER_FAILURE\n} from './weatherTypes';\n\n\nconst initialState ={\n    loading: false,\n    weather: undefined,\n    error: undefined\n}\n\nconst weatherReducer = (state = initialState, action) => {\n  switch(action.type){\n    case FETCH_WEATHER_REQUEST: return{\n      ...state,\n      loading: true\n    };\n    case FETCH_WEATHER_SUCCESS: return{\n      ...state,\n      loading: false,\n      weather: action.payload,\n      error: undefined\n    };\n    case FETCH_WEATHER_FAILURE: return {\n      ...state,\n      loading: false,\n      weather: undefined,\n      error: action.payload,\n    };\n    default: return state\n  }\n}\n\nexport default weatherReducer;","import {combineReducers} from 'redux';\nimport weatherReducer from './weather/weatherReducer';\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer,\n})\n\nexport default rootReducer;","import {createStore} from 'redux';\nimport rootReduser from './rootReducer';\nimport logger from 'redux-logger'\nimport {applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(\n  rootReduser,\n  composeWithDevTools(applyMiddleware(logger, thunk)));\n\nexport default store;\n\n","import React from 'react';\nimport Header from './components/header/Header';\nimport Footer from './components/footer/footer';\nimport './App.scss';\nimport WeatherSearchAndShow from './components/WeatherSearchAndShow/WeatherSearchAndShow';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header />\n        <WeatherSearchAndShow />\n        <Footer />\n      </div>\n    </Provider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n     <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}